basePath: /api/v1
definitions:
  domain.CreateUserRequest:
    properties:
      email:
        example: john@example.com
        type: string
        x-order: "2"
      full_name:
        example: John Doe
        type: string
        x-order: "1"
      password:
        type: string
    type: object
  domain.UpdateUserRequest:
    properties:
      email:
        example: john@example.com
        type: string
        x-order: "2"
      full_name:
        example: John Doe
        type: string
        x-order: "1"
      verified:
        example: true
        type: boolean
        x-order: "3"
    type: object
  domain.User:
    properties:
      created_at:
        example: "2022-01-01T00:00:00Z"
        type: string
        x-order: "5"
      email:
        example: john@example.com
        type: string
        x-order: "3"
      full_name:
        example: John Doe
        type: string
        x-order: "2"
      id:
        example: 1
        type: integer
        x-order: "1"
      updated_at:
        example: "2022-01-01T00:00:00Z"
        type: string
        x-order: "6"
      verified:
        example: true
        type: boolean
        x-order: "4"
    type: object
  httperror.HTTPError:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  httperror.HTTPValidationError:
    properties:
      code:
        type: integer
      details:
        items:
          $ref: '#/definitions/httperror.ValidationError'
        type: array
      message:
        type: string
    type: object
  httperror.ValidationError:
    properties:
      field:
        type: string
      message:
        type: string
    type: object
host: moneytracker.local
info:
  contact:
    email: vasapol.rittideah@outlook.com
    name: Vasapol Rittideah
  description: This is a user service for Money Tracker API
  license:
    name: MIT
    url: https://github.com/vasapolrittideah/money-tracker-api/blob/main/LICENSE
  title: Money Tracker API
  version: "1.0"
paths:
  /users:
    get:
      description: get a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.User'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httperror.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperror.HTTPError'
      summary: Get all users
      tags:
      - User
    post:
      description: create a new user
      parameters:
      - description: User to create
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperror.HTTPValidationError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httperror.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperror.HTTPError'
      summary: Create user
      tags:
      - User
  /users/{id}:
    delete:
      description: delete a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperror.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httperror.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperror.HTTPError'
      summary: Delete user
      tags:
      - User
    get:
      description: get a user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperror.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httperror.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperror.HTTPError'
      summary: Get user by id
      tags:
      - User
    put:
      description: update a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperror.HTTPValidationError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httperror.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperror.HTTPError'
      summary: Update user
      tags:
      - User
  /users/email/{email}:
    get:
      description: get a user by email
      parameters:
      - description: User Email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperror.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httperror.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperror.HTTPError'
      summary: Get user by email
      tags:
      - User
swagger: "2.0"
